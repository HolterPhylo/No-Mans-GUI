No Mans GUI Notes

Chat with Gaticus:

GaticusHaxToday at 12:45 AM
yeah, nothing has been written for the API proper yet
I merely separated out the core code from the exe, so it could be accessed, so not friendly yet
to get the format of a struct, you can list the fields, like is done in NMSTemplate.Serialize and Deserialize
look at NMSTemplate.cs:927
    var fields = type.GetFields().OrderBy(field => field.MetadataToken);

    loop fields...
I dnot know what you mean by query value by property name
if things work, you should be able to create an instance of GcBaseBuildingTable from the loaded MBIN, then you can use it like any other class
so in effect:
var baseBuildingTable = new GcBaseBuildingTable();
foreach (var entry in baseBuilding.Objects) {
    if (entry.ID == 2) { // found it!
        // do stuff
        continue;
    }
}
theFisher86Today at 12:55 AM
cool
GaticusHaxToday at 12:58 AM
or if you just want to return the entry with ID == 2, you can use a  linq query
var entry = baseBuildingTable.Objects.Where( x => x.ID == 2)[0]; // assumes that a valid entry is found!
GaticusHaxToday at 1:00 AM
we just have to figure out how to get the data from an NMSTemplate to a GcBaseBuildingTable type :/


RegulAss XML Format:


If (has [name] AND [value]){<Name>value</Name>} //Children
elseIf(has [name]){<Name type="cat"></Name>} //Parent
elseIf(has [value]){Value type="struct"></Value>} //Struct Parent




-----------------------------------------------------------------------

@theFisher86 
        // in your class
        private delegate void TypeHandlerCallback( FieldInfo fieldInfo );
        private Dictionary<Type, TypeHandlerCallback> TypeHandlerTable { get; set; }

        private void CreateTypeHandlerTable() {
            TypeHandlerTable = new Dictionary<Type, TypeHandlerCallback>() {
                { typeof( bool ), HandleBool  }
            };
        }

        public MyClass() {
            CreateTypeHandlerTable();
        }

        private void HandleBool( FieldInfo fieldInfo ) {
            Debug.WriteLine( "Boolean Detected" );
            Label labelName = new Label();
            labelName.Content = fieldInfo.Name;

            CheckBox checkBox = new CheckBox();
            Boolean checkValue = Convert.ToBoolean( fieldInfo.GetValue( data ) );
            checkBox.IsChecked = checkValue;

            ControlEditor.Children.Add( labelName );
            ControlEditor.Children.Add( checkBox );
        }

        // etc .. 
        private void Foo() {
            // etc ...
            foreach ( var fieldInfo in fields ) {
                Debug.WriteLine( $"Type = {fieldInfo.FieldType}, Name = {fieldInfo.Name}, Value = {fieldInfo.GetValue( data )}" );    //Write all fields to Debug
                TypeHandlerTable[fieldInfo.FieldType]( fieldInfo );
            }
        }
(edited)
oops, forgot the constructor: fixed(edited)
now you create a method for each type, and add an entry to the table
and you don't have to deal with a giant tree of code
or strings